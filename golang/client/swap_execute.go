package client

import (
	"context"
	"crypto/ecdsa"
	"encoding/hex"
	"errors"
	"fmt"
	"math/big"

	"github.com/1inch/1inch-sdk/golang/client/onchain"
	"github.com/1inch/1inch-sdk/golang/client/swap"
	"github.com/1inch/1inch-sdk/golang/helpers"
	"github.com/1inch/1inch-sdk/golang/helpers/consts/amounts"
	"github.com/1inch/1inch-sdk/golang/helpers/consts/contracts"
	"github.com/1inch/1inch-sdk/golang/helpers/consts/tokens"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/crypto"
)

// This file breaks convention. It sends transactions to the blockchain directly instead of using the 1inch API.

// ExecuteSwap executes a swap on the Ethereum blockchain using swap data generated by GetSwapData
func (s *SwapService) ExecuteSwap(config *swap.ExecuteSwapConfig) error {

	if s.client.WalletKey == "" {
		return fmt.Errorf("wallet key must be set in the client config")
	}

	if !config.SkipWarnings {
		ok, err := swap.ConfirmExecuteSwapWithUser(config, s.client.EthClient)
		if err != nil {
			return fmt.Errorf("failed to confirm swap: %v", err)
		}
		if !ok {
			return errors.New("user rejected trade")
		}
	}

	privateKey, err := crypto.HexToECDSA(s.client.WalletKey)
	if err != nil {
		return fmt.Errorf("failed to convert private key: %v", err)
	}

	chainID, err := s.client.EthClient.NetworkID(context.Background())
	if err != nil {
		return fmt.Errorf("failed to get network ID: %v", err)
	}

	aggregationRouter, err := contracts.Get1inchRouterFromChainId(s.client.ChainId)
	if err != nil {
		return fmt.Errorf("failed to get 1inch router address: %v", err)
	}

	if !config.IsPermitSwap {
		err = s.executeSwapWithApproval(aggregationRouter, config.FromToken, config.Amount, privateKey, config.TransactionData, config.SkipWarnings)
		if err != nil {
			return fmt.Errorf("failed to execute swap with approval: %v", err)
		}
	} else {
		err = s.executeSwapWithPermit(chainID, privateKey, config.TransactionData)
		if err != nil {
			return fmt.Errorf("failed to execute swap with permit: %v", err)
		}
	}

	return nil
}

func (s *SwapService) executeSwapWithApproval(spenderAddress string, fromToken string, amount string, privateKey *ecdsa.PrivateKey, transactionData string, skipWarnings bool) error {

	var allowance *big.Int
	var err error
	if fromToken != tokens.NativeToken {
		allowance, err = onchain.ReadContractAllowance(s.client.EthClient, common.HexToAddress(fromToken), s.client.PublicAddress, common.HexToAddress(spenderAddress))
		if err != nil {
			return fmt.Errorf("failed to read allowance: %v", err)
		}
	} else {
		allowance = amounts.BigMaxUint256
	}

	amountBig, err := helpers.BigIntFromString(amount)
	if err != nil {
		return fmt.Errorf("failed to convert amount to big.Int: %v", err)
	}
	if allowance.Cmp(amountBig) <= 0 {
		if !skipWarnings {
			ok, err := swap.ConfirmApprovalWithUser(s.client.EthClient, s.client.PublicAddress.Hex(), fromToken)
			if err != nil {
				return fmt.Errorf("failed to confirm approval: %v", err)
			}
			if !ok {
				return errors.New("user rejected approval")
			}
		}
		err = onchain.ApproveTokenForRouter(s.client.EthClient, s.client.ChainId, s.client.WalletKey, common.HexToAddress(fromToken), s.client.PublicAddress, common.HexToAddress(spenderAddress))
		if err != nil {
			return fmt.Errorf("failed to approve token for router: %v", err)
		}
		helpers.Sleep()
	}

	hexData, err := hex.DecodeString(transactionData[2:])
	if err != nil {
		return fmt.Errorf("failed to decode swap data: %v", err)
	}

	aggregationRouter, err := contracts.Get1inchRouterFromChainId(s.client.ChainId)
	if err != nil {
		return fmt.Errorf("failed to get 1inch router address: %v", err)
	}

	chainIdBig := big.NewInt(int64(s.client.ChainId))

	swapTx, err := onchain.GetTx(s.client.EthClient, chainIdBig, s.client.PublicAddress, fromToken, amount, aggregationRouter, hexData)

	// Sign the transaction
	swapTxSigned, err := types.SignTx(swapTx, types.LatestSignerForChainID(chainIdBig), privateKey)
	if err != nil {
		return fmt.Errorf("failed to sign transaction: %v", err)
	}

	// Send the transaction
	err = s.client.EthClient.SendTransaction(context.Background(), swapTxSigned)
	if err != nil {
		return fmt.Errorf("failed to send transaction: %v", err)
	}

	fmt.Println("Swap transaction sent!")
	helpers.PrintBlockExplorerTxLink(s.client.ChainId, swapTxSigned.Hash().String())

	_, err = onchain.WaitForTransaction(s.client.EthClient, swapTxSigned.Hash())
	if err != nil {
		return fmt.Errorf("failed to get transaction receipt: %v", err)
	}
	return nil
}

func (s *SwapService) executeSwapWithPermit(chainID *big.Int, privateKey *ecdsa.PrivateKey, transactionData string) error {

	hexData, err := hex.DecodeString(transactionData[2:])
	if err != nil {
		return fmt.Errorf("failed to decode swap data: %v", err)
	}

	aggregationRouter, err := contracts.Get1inchRouterFromChainId(s.client.ChainId)
	if err != nil {
		return fmt.Errorf("failed to get 1inch router address: %v", err)
	}

	permitSwapTx, err := onchain.GetTx(s.client.EthClient, chainID, s.client.PublicAddress, "", "0", aggregationRouter, hexData) // TODO Fix the empty string and 0 being passed in
	if err != nil {
		return fmt.Errorf("failed to get dynamic fee tx: %v", err)
	}

	// Sign the transaction
	permitSwapTxSigned, err := types.SignTx(permitSwapTx, types.LatestSignerForChainID(chainID), privateKey)
	if err != nil {
		return fmt.Errorf("failed to sign transaction: %v", err)
	}

	// Send the transaction
	err = s.client.EthClient.SendTransaction(context.Background(), permitSwapTxSigned)
	if err != nil {
		return fmt.Errorf("failed to send transaction: %v", err)
	}

	fmt.Println("Swap transaction sent!")
	helpers.PrintBlockExplorerTxLink(s.client.ChainId, permitSwapTxSigned.Hash().String())

	_, err = onchain.WaitForTransaction(s.client.EthClient, permitSwapTxSigned.Hash())
	if err != nil {
		return fmt.Errorf("failed to get transaction receipt: %v", err)
	}
	fmt.Printf("Transaction mined!")
	return nil
}
